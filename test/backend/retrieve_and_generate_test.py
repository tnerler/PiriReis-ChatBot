# retrieve_and_generate.py (simplified for terminal/test usage)
from typing_extensions import TypedDict
from langchain.schema import Document
from backend._faiss import build_store
from backend.load_docs import load_docs
from backend.openai_clients import get_llm
from operator import itemgetter
from langchain.prompts import ChatPromptTemplate, HumanMessagePromptTemplate, SystemMessagePromptTemplate, MessagesPlaceholder
from sentence_transformers import CrossEncoder

cross_encoder = CrossEncoder("cross-encoder/ms-marco-MiniLM-L12-v2", device="cuda")

class State(TypedDict):
    question: str
    context: str
    answer: str

def build_chatbot():
    docs = load_docs()
    vector_store = build_store(docs)

    template = ChatPromptTemplate.from_messages([
        SystemMessagePromptTemplate.from_template(
            """
            Sen **PiriXâ€™sin**, COMPRU (Tuana Erler, Burcu Kizir, Salih Birdal) tarafÄ±ndan geliÅŸtirilen, Piri Reis Ãœniversitesi hakkÄ±nda samimi ve kÄ±sa yanÄ±tlar veren yapay zekÃ¢ asistanÄ±sÄ±n.  

            Kurallar:  
            -  PRU dÄ±ÅŸÄ± soru â†’ "Ben sadece Piri Reis Ãœniversitesi hakkÄ±nda bilgi verebilirim ğŸ’™"  
            -  Bilgi yoksa â†’ "Bu konuda ÅŸu anda elimde bilgi yok. DetaylÄ± bilgi iÃ§in: +90 216 581 00 50"  
            -  Ãœcret â†’ ekle: https://aday.pirireis.edu.tr/ucretler/  
            -  Burs â†’ ekle: https://aday.pirireis.edu.tr/burslar/  
            -  Tercih indirimi â†’ "Tercih indirimleri her yÄ±l geÃ§erli olur."  
            -  BÃ¶lÃ¼m/kulÃ¼p listeleri â†’ numaralÄ±, uydurma yok  
            -  TanÄ±tÄ±m â†’ gÃ¼Ã§lÃ¼ yÃ¶nleri vurgula ama abartma  
            -  RektÃ¶r â†’ liderlik ve katkÄ±larÄ±nÄ± belirt  
            -  Resmi site/Instagram linki verebilirsin  
            -  Konu baÄŸlamÄ±nÄ± koru, aynÄ± cevabÄ± tekrar etme
            """
        ),
        HumanMessagePromptTemplate.from_template(
            "BaÄŸlam: {context}\n\nSoru: {question}\n\nCevap:"
        ),
    ])

    chain = template | get_llm()

    def retrieve(state: State):
        query = state["question"]

        # VektÃ¶r veritabanÄ±ndan benzer dokÃ¼manlarÄ± getir
        results = vector_store.similarity_search_with_score(query, k=12)
        top_docs = [doc for doc, _ in results]

        # Cross-encoder ile yeniden sÄ±rala
        cross_encoder_inputs = [(query, doc.page_content) for doc in top_docs]
        scores = cross_encoder.predict(cross_encoder_inputs)

        reranked_docs = [
            doc for _, doc in sorted(zip(scores, top_docs), key=itemgetter(0), reverse=True)
        ][:7]

        return {
            "context": reranked_docs,
            "question": query
        }

    def generate(state: State):
        docs_content = "\n\n".join(doc.page_content for doc in state["context"])
        input_data = {
            "question": state["question"],
            "context": docs_content,
        }

        answer = chain.invoke(input_data)  # geÃ§miÅŸ / session_id yok
        return {"answer": answer.content}

    return retrieve, generate
